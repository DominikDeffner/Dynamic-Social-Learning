sum(Delta_f[1:i])
}
}
Mean_m_Mat_f <- apply(m_Mat_f,2,mean)
#beta
Delta_beta <- c()
for (i in 1:19) {
Delta_beta[i] <- mean(m$delta_beta[,i])
}
Delta_beta <- c(0, Delta_beta)
m_Mat_beta <- matrix(0, nrow = 200, ncol = 20)
for (j in 1:200) {
for (i in 1:20) {
m_Mat_beta[j,i] <- (mean(m$Gauss_beta_first) + mean(m$v_ID[,j,3])) -
((mean(m$Gauss_beta_first) + mean(m$v_ID[,j,3])) - (mean(m$Gauss_beta_last) + mean(m$v_ID[,j,4]))) *
sum(Delta_beta[1:i])
}
}
Mean_m_Mat_beta <- apply(m_Mat_beta,2,mean)
#kappa
Delta_kappa <- c()
for (i in 1:19) {
Delta_kappa[i] <- mean(m$delta_kappa[,i])
}
Delta_kappa <- c(0, Delta_kappa)
m_Mat_kappa <- matrix(0, nrow = 200, ncol = 20)
for (j in 1:200) {
for (i in 1:20) {
m_Mat_kappa[j,i] <- inv_logit(mean(m$logit_kappa_first) + mean(m$v_ID[,j,7])) -
(inv_logit(mean(m$logit_kappa_first) + mean(m$v_ID[,j,7])) - inv_logit(mean(m$logit_kappa_last) + mean(m$v_ID[,j,8]))) *
sum(Delta_kappa[1:i])
}
}
Mean_m_Mat_kappa <- apply(m_Mat_kappa,2,mean)
#color stuff
require(RColorBrewer)#load package
x <- seq(from=0, to=1, by=0.2) # fake data
col.pal <- brewer.pal(length(x), "Dark2") #create a pallette which you loop over for corresponding values
graphics.off()
png("Fig4MonotonicEffectsSL.png", res = 1200, height = 16, width = 16, units = "cm")
par(mfrow= c(2,2),
mar=c(1,4,2,0.4),
oma=c(3,0,0,0))
plot(Mean_M_mat_sigma, ylim=c(0,1), ylab="",type="n", xlab="", lwd=3, col="black")
for (j in 1:200) {
lines(m_Mat_sigma[j,], type="l", ylim=c(0,1), ylab="", xlab="", lwd=1,col=alpha(col.pal[2],alpha = 0.2))
}
lines(Mean_M_mat_sigma, type="l", ylim=c(0,1), ylab="", xlab="", lwd=3, col="black")
mtext(side = 2, line = 2.2 , expression(paste("Weight of social learning  ", italic(sigma))), cex = 0.9)
legend("topleft", "A", cex=1.1, bty="n")
plot(Mean_m_Mat_f, ylab="",type="n", xlab="", lwd=3, col="black", ylim=c(0,5))
for (j in 1:200) {
lines(m_Mat_f[j,], type="l",  ylab="", xlab="", lwd=1,col=alpha(col.pal[2],alpha = 0.2))
}
lines(Mean_m_Mat_f, type="l", ylab="", xlab="", lwd=3, col="black")
mtext(side = 2, line = 2.2 , expression(paste("Conformity exponent  ", italic(f))), cex = 0.9)
legend("topleft", "B", cex=1.1, bty="n")
abline(h=1, lty=2)
plot(Mean_m_Mat_beta, ylim=c(-0.25,1), ylab="",type="n", xlab="", lwd=3, col="black")
for (j in 1:200) {
lines(m_Mat_beta[j,], type="l", ylab="", xlab="", lwd=1,col=alpha(col.pal[2],alpha = 0.2))
}
lines(Mean_m_Mat_beta, type="l", ylim=c(-0.25,1), ylab="", xlab="", lwd=3, col="black")
mtext(side = 2, line = 2.2 , expression(paste("Experience bias  ", italic(beta))), cex = 0.9)
legend("topleft", "C", cex=1.1, bty="n")
abline(h=0, lty=2)
plot(Mean_m_Mat_kappa, ylim=c(0,1), ylab="",type="n", xlab="", lwd=3, col="black")
for (j in 1:200) {
lines(m_Mat_kappa[j,], type="l", ylim=c(0,1), ylab="", xlab="", lwd=1,col=alpha(col.pal[2],alpha = 0.2))
}
lines(Mean_m_Mat_kappa, type="l", ylim=c(0,1), ylab="", xlab="", lwd=3, col="black")
mtext(side = 2, line = 2.2 , expression(paste("Weight of experience bias  ", italic(kappa))), cex = 0.9)
legend("topleft", "D", cex=1.1, bty="n")
mtext(side = 1, line = 1.4 , "Round after migration", outer = TRUE, cex = 0.9)
dev.off()
###Dynamic Social Learning in Temporally and Spatially Variable Environments ###
### Data preparation script ###
library(readxl)
library(tidyverse)
library(rethinking)
setwd("C:/Users/dominik_deffner/Documents/GitHub/Dynamic-Social-Learning")
#Load data
d <- read_csv("data.csv")
ifelse(d$ChoiceSelf == d$Optimal, 1, 0)
d$Correct <- ifelse(d$ChoiceSelf == d$Optimal, 1, 0)
c(1,2,3)==1
c(1,2,3)==1
sum(c(1,2,3)==1)
sum(c(1,2,1)==1)
#Variable that indicates whether choice in round was "correct"
d$Correct <- ifelse(d$ChoiceSelf == d$Optimal, 1, 0)
#Number of models that chose option 1 to 4
d$n1 <- sapply(1:nrow(d),function (i) sum(c(d$Choice1[i], d$Choice2[i],d$Choice3[i])==1))
d$n2 <- sapply(1:nrow(d),function (i) sum(c(d$Choice1[i], d$Choice2[i],d$Choice3[i])==2))
d$n3 <- sapply(1:nrow(d),function (i) sum(c(d$Choice1[i], d$Choice2[i],d$Choice3[i])==3))
d$n4 <- sapply(1:nrow(d),function (i) sum(c(d$Choice1[i], d$Choice2[i],d$Choice3[i])==4))
# NAs are coded as zero, so they don't enter into learning model
d$n1[is.na(d$n1)] <- 0
d$n2[is.na(d$n2)] <- 0
d$n3[is.na(d$n3)] <- 0
d$n4[is.na(d$n4)] <- 0
#Define functions for processing of mouselab tracking data
#Takes a string of process trace data and makes it into a data frame where each row is an event; columns are event, name, value, time
parse.proctrace <- function( x ) {
xx <- gsub( "  " , "\n" , x , fixed=TRUE ) #Substitute space with \n indicating line breaks
z <- textConnection(xx)
d <- read.csv( z )
close(z)
d
}
# Take a parsed trace and collapse mouseover and mouseout, making time into duration in box
condense.proctrace <- function( input ) {
#out <- input[1,] # copy load event
r <- 2
f.out.made <- FALSE
while( r < length(input[,1]) ) {
row1 <- input[r,]
if( row1$event == "mouseover" ) {
row2 <- input[r+1,]
t1 <- row1$time
t2 <- row2$time
dur <- t2 - t1
row1$time <- dur
if ( f.out.made ) {
out <- rbind( out , row1 )
} else {
out <- row1
f.out.made <- TRUE
}
r <- r + 2
}
}
out
}
# Wrap two functions above
clean.proctrace <- function( x ) {
d <- parse.proctrace( x )
condense.proctrace( d )
}
# Count total time in ms spent in box with name "name"
dviewed.proctrace <- function( x , name ) {
d <- 0
for( r in 1:length(x[,1]) ) {
if( x[r,2] == name ) d <- d + x[r,4]
}
d
}
Clean.protrace.list <- list()
for (i in 1:nrow(d)) {
#Check if it's first round or individuals didn't open any box. In that case insert 0
if (is.na(d$MouseTracking[i]) == TRUE | nrow(parse.proctrace(d$MouseTracking[i])) < 2 ){
Clean.protrace.list[[i]] <- 0
} else {
Clean.protrace.list[[i]] <- clean.proctrace(d$MouseTracking[i])
}
}
#Compute for each box time spent in it in ms
#Initialize variables
d$ChoiceSelf_ms <- 0
d$Payoff_ms <- 0
d$ExperienceSelf_ms <- 0
d$Choice1_ms <- 0
d$Choice2_ms <- 0
d$Choice3_ms <- 0
d$Experience1_ms <- 0
d$Experience2_ms <- 0
d$Experience3_ms <- 0
for (i in 1:nrow(d)) {
if (Clean.protrace.list[[i]] != 0){
d$ChoiceSelf_ms[i]     <- dviewed.proctrace(Clean.protrace.list[[i]], "CropSelf")
d$Payoff_ms[i]         <- dviewed.proctrace(Clean.protrace.list[[i]], "PayoffSelf")
d$ExperienceSelf_ms[i] <- dviewed.proctrace(Clean.protrace.list[[i]], "ExpSelf")
d$Choice1_ms[i]        <- dviewed.proctrace(Clean.protrace.list[[i]], "Crop1")
d$Choice2_ms[i]        <- dviewed.proctrace(Clean.protrace.list[[i]], "Crop2")
d$Choice3_ms[i]        <- dviewed.proctrace(Clean.protrace.list[[i]], "Crop3")
d$Experience1_ms[i]    <- dviewed.proctrace(Clean.protrace.list[[i]], "Exp1")
d$Experience2_ms[i]    <- dviewed.proctrace(Clean.protrace.list[[i]], "Exp2")
d$Experience3_ms[i]    <- dviewed.proctrace(Clean.protrace.list[[i]], "Exp3")
}
}
warnings()
#Include mouse tracking data to condition learning models on information actually accessed by individuals
Check_fct <- function (i, x) {
Obs1 <- ifelse(d$Choice1_ms[i] > 0, d$Choice1[i],0)
Obs2 <- ifelse(d$Choice2_ms[i] > 0, d$Choice2[i],0)
Obs3 <- ifelse(d$Choice3_ms[i] > 0, d$Choice3[i],0)
return(sum(c(Obs1, Obs2, Obs3)==x))
}
# Create variables equivalent to above but incorporating mouse tracking info
#Number of models that chose option 1 to 4
d$n1_obs <- sapply(1:nrow(d), Check_fct, x=1)
d$n2_obs <- sapply(1:nrow(d), Check_fct, x=2)
d$n3_obs <- sapply(1:nrow(d), Check_fct, x=3)
d$n4_obs <- sapply(1:nrow(d), Check_fct, x=4)
d$n1_obs[is.na(d$n1_obs)] <- 0
d$n2_obs[is.na(d$n2_obs)] <- 0
d$n3_obs[is.na(d$n3_obs)] <- 0
d$n4_obs[is.na(d$n4_obs)] <- 0
#Social information from group members: 0 if not viewed by participant
d$Choice1_obs <- ifelse(d$Choice1_ms > 0 , d$Choice1, 0 )
d$Choice2_obs <- ifelse(d$Choice2_ms > 0 , d$Choice2, 0 )
d$Choice3_obs <- ifelse(d$Choice3_ms > 0 , d$Choice3, 0 )
d$Experience1_obs <- ifelse(d$Experience1_ms > 0 , d$Experience1, 0 )
d$Experience2_obs <- ifelse(d$Experience2_ms > 0 , d$Experience2, 0 )
d$Experience3_obs <- ifelse(d$Experience3_ms > 0 , d$Experience3, 0 )
#Number of models that chose option 1 to 4
d$n1_obs <- sapply(1:nrow(d), Check_fct, x=1)
d$n2_obs <- sapply(1:nrow(d), Check_fct, x=2)
d$n3_obs <- sapply(1:nrow(d), Check_fct, x=3)
d$n4_obs <- sapply(1:nrow(d), Check_fct, x=4)
d$n1_obs[is.na(d$n1_obs)] <- 0
d$n2_obs[is.na(d$n2_obs)] <- 0
d$n3_obs[is.na(d$n3_obs)] <- 0
d$n4_obs[is.na(d$n4_obs)] <- 0
#Social information from group members: 0 if not viewed by participant
d$Choice1_obs <- ifelse(d$Choice1_ms > 0 , d$Choice1, 0 )
d$Choice2_obs <- ifelse(d$Choice2_ms > 0 , d$Choice2, 0 )
d$Choice3_obs <- ifelse(d$Choice3_ms > 0 , d$Choice3, 0 )
d$Experience1_obs <- ifelse(d$Experience1_ms > 0 , d$Experience1, 0 )
d$Experience2_obs <- ifelse(d$Experience2_ms > 0 , d$Experience2, 0 )
d$Experience3_obs <- ifelse(d$Experience3_ms > 0 , d$Experience3, 0 )
#Computer phase (1 to 4), times of temporal changes and time since last temporal change
d$Phase <- c()
d$Phase <- as.integer( ceiling( d$Round / 25 ) )
d$TempChange <- sapply( 1:nrow(d) , function(i) {
if ( d$Round[i]>1 ) {
return( ifelse(d$Phase[i]!=d$Phase[i-1],1,0) )
} else {
return(0)
}
}
)
d$TimeSinceChange <- NA
Times_Env_Change <- c(25,50,75)
for (i in 1:nrow(d)){
if (d$Round[i] <= 25){
d$TimeSinceChange[i] <- d$Round[i]
} else {
d$TimeSinceChange[i] <- d$Round[i] - max(Times_Env_Change[which(Times_Env_Change<d$Round[i])])
}
}
dat <- as.list(select(d, Session_ID, ID_In_Session, Round, ChoiceSelf,Payoff, ExperienceSelf, Phase, TempChange,TimeSinceChange))
#Make numeric IDs
dat$Session_ID <- as.numeric(factor(dat$Session_ID, ordered = TRUE))
dat$id <- (dat$Session_ID - 1)*8 + dat$ID_In_Session
dat$sid <- dat$ID_In_Session
dat$N_id <- max(dat$id)
dat$N <- nrow(d)
as.numeric(factor(dat$Session_ID, ordered = TRUE))
dat$ID_In_Session
#prep matrices with choices and experience levels ("ages"). One version with all infos, one with only info viewed by participant
nmat     <- cbind( d$n1 , d$n2 , d$n3 , d$n4 )
nmat_obs <- cbind( d$n1_obs , d$n2_obs , d$n3_obs , d$n4_obs )
choice_models     <- cbind(d$Choice1, d$Choice2, d$Choice3)
choice_models_obs <- cbind(d$Choice1_obs, d$Choice2_obs, d$Choice3_obs)
age_models_obs    <- cbind(d$Experience1_obs, d$Experience2_obs, d$Experience3_obs)
age_models        <- cbind(d$Experience1, d$Experience2, d$Experience3)
nmat[is.na(nmat)] <- 0
choice_models[is.na(choice_models)] <- 0
age_models[is.na(age_models)] <- 0
nmat_obs[is.na(nmat_obs)] <- 0
choice_models_obs[is.na(choice_models_obs)] <- 0
age_models_obs[is.na(age_models_obs)] <- 0
dat$nmat <- nmat
dat$choice_models <- choice_models
dat$age_models <- age_models
dat$nmat_obs <- nmat_obs
dat$choice_models_obs <- choice_models_obs
dat$age_models_obs <- age_models_obs
nmat[is.na(nmat)] <- 0
choice_models[is.na(choice_models)] <- 0
age_models[is.na(age_models)] <- 0
nmat_obs[is.na(nmat_obs)] <- 0
choice_models_obs[is.na(choice_models_obs)] <- 0
age_models_obs[is.na(age_models_obs)] <- 0
dat$nmat <- nmat
dat$choice_models <- choice_models
dat$age_models <- age_models
dat$nmat_obs <- nmat_obs
dat$choice_models_obs <- choice_models_obs
dat$age_models_obs <- age_models_obs
#Experience distance matrix for Gaussian processes
dat$expmat <- matrix(nrow = 20, ncol = 20)
for (i in 1:20) {
for (j in 1:20) {
dat$expmat[i,j] <- abs(i-j)
}
}
matrix(nrow = 20, ncol = 20)
for (i in 1:20) {
for (j in 1:20) {
dat$expmat[i,j] <- abs(i-j)
}
}
for (i in 1:20) {
for (j in 1:20) {
dat$expmat[i,j] <- abs(i-j)
}
}
dat$expmat <- matrix(nrow = 20, ncol = 20)
for (i in 1:20) {
for (j in 1:20) {
dat$expmat[i,j] <- abs(i-j)
}
}
dat$expmat
#Dummy variables for contrasts between temporal and spatial changes
dat$spat <- ifelse(dat$Experience <=5 & dat$Round > 5, 1, 0)
dat$temp <- ifelse(dat$TimeSinceChange <=5 & dat$Round > 5, 1, 0)
#Script to reproduce Fig. 2 - Behavioral Results
#Proportion Correct
# Spatial
CorrectperExpHard <- matrix(0, nrow = 200, ncol = 20)
CorrectperExpEasy <- matrix(0, nrow = 200, ncol = 20)
for (i in 1:20) {
for (j in unique(d$id)) {
CorrectperExpHard[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==1)])/length(d$Correct[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==1)])
CorrectperExpEasy[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==0)])/length(d$Correct[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==0)])
}
}
se <- function(x) sd(x)/sqrt(length(x))
meanCorrectperExpHard <- apply(CorrectperExpHard,2, mean)
SECorrectperExpHard <- apply(CorrectperExpHard,2, se)
meanCorrectperExpEasy <- apply(CorrectperExpEasy,2, mean)
SECorrectperExpEasy <- apply(CorrectperExpHard,2, se)
# Temporal
CorrectperTimeHard <- matrix(0, nrow = 200, ncol = 25)
CorrectperTimeEasy <- matrix(0, nrow = 200, ncol = 25)
for (i in 1:25) {
for (j in unique(d$id)) {
CorrectperTimeHard[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==1)])/length(d$Correct[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==1)])
CorrectperTimeEasy[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==0)])/length(d$Correct[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==0)])
}
}
meanCorrectperTimeHard <- apply(CorrectperTimeHard,2, mean)
SECorrectperTimeHard <- apply(CorrectperTimeHard,2, se)
meanCorrectperTimeEasy <- apply(CorrectperTimeEasy,2, mean)
SECorrectperTimeEasy <- apply(CorrectperTimeHard,2, se)
#Proportion Vied
# Spatial
ChoiceperExp <- matrix(0, nrow = 200, ncol = 20)
ExpperExp <- matrix(0, nrow = 200, ncol = 20)
for (i in 1:20) {
for (j in unique(d$id)) {
ChoiceperExp[which(unique(d$id)==j), i] <- sum(d$Prop_Choice[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==1)])/length(d$Prop_Choice[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==1)])
ExpperExp[which(unique(d$id)==j), i]    <- sum(d$Prop_Exp[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==0)])/length(d$Prop_Exp[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==0)])
}
}
meanChoiceperExp <- apply(ChoiceperExp,2, mean)
SEChoiceperExp <- apply(ChoiceperExp,2, se)
meanExpperExp <- apply(ExpperExp,2, mean)
SEExpperExp <- apply(ExpperExp,2, se)
# Temporal
ChoiceperTime <- matrix(0, nrow = 200, ncol = 25)
ExpperTime <- matrix(0, nrow = 200, ncol = 25)
for (i in 1:25) {
for (j in unique(d$id)) {
ChoiceperTime[which(unique(d$id)==j), i] <- sum(d$Prop_Choice[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==1)])/length(d$Prop_Choice[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==1)])
ExpperTime[which(unique(d$id)==j), i]    <- sum(d$Prop_Exp[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==0)])/length(d$Prop_Exp[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==0)])
}
}
meanChoiceperTime<- apply(ChoiceperTime,2, mean)
SEChoiceperTime <- apply(ChoiceperTime,2, se)
meanExpperTime <- apply(ExpperTime,2, mean)
SEExpperTime <- apply(ExpperTime,2, se)
#color stuff
require(RColorBrewer)#load package
x <- seq(from=0, to=1, by=0.2) # fake data
col.pal <- brewer.pal(length(x), "Dark2") #create a pallette which you loop over for corresponding values
par(mfrow = c(2,2),
mar= c(1,1,2,2),
oma =c(3,3,1,0))
plot(meanCorrectperExpHard, type="l", lwd=2, lty=2, ylim=c(0.1,0.75), ylab="Proportion Correct",xlab="", col = col.pal[1])
arrows(1:20,meanCorrectperExpHard-SECorrectperExpHard,1:20,meanCorrectperExpHard+SECorrectperExpHard, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[1])
par(new=TRUE)
plot(meanCorrectperExpEasy, type="l",lwd=2,lty=1,  ylim=c(0.1,0.75), ylab=" ", main="Spatial Change (Migration)", xlab="", col = col.pal[2])
arrows(1:20,meanCorrectperExpEasy-SECorrectperExpEasy,1:20,meanCorrectperExpEasy+SECorrectperExpEasy, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[2])
abline(h = 0.25, lty=2)
legend("topleft", "A", cex=1.1, bty="n")
text(10, 0.27, "Chance level", col="black", cex = 0.8)
plot(meanCorrectperTimeHard, type="l", lwd=2, lty=2, ylim=c(0.1,0.75), ylab="",xlab="", col = col.pal[1])
arrows(1:25,meanCorrectperTimeHard-SECorrectperTimeHard,1:25,meanCorrectperTimeHard+SECorrectperTimeHard, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[1])
par(new=TRUE)
plot(meanCorrectperTimeEasy, type="l",lwd=2,lty=1,  ylim=c(0.1,0.75), ylab=" ", main="Temporal Change", xlab="", col = col.pal[2])
arrows(1:25,meanCorrectperTimeEasy-SECorrectperTimeEasy,1:25,meanCorrectperTimeEasy+SECorrectperTimeEasy, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[2])
abline(h = 0.25, lty=2)
legend("topleft", "B", cex=1.1, bty="n")
text(12.5, 0.27, "Chance level", col="black", cex = 0.8)
legend("bottomright", c("Easy Phases", "Hard Phases"), col = c(col.pal[2],col.pal[1]), lty=c(1,2), lwd=2, bty ="n", cex=0.9)
plot(meanChoiceperExp, type="l", lwd=2, lty=2, ylim=c(0.3,1), ylab="Proportion ",xlab="", col = col.pal[3])
arrows(1:20,meanChoiceperExp-SEChoiceperExp,1:20,meanChoiceperExp+SEChoiceperExp, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[3])
par(new=TRUE)
plot(meanExpperExp, type="l",lwd=2,lty=1,  ylim=c(0.3,1), ylab=" ", xlab="", col = col.pal[6])
arrows(1:20,meanExpperExp-SEExpperExp,1:20,meanExpperExp+SEExpperExp, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[6])
legend("topleft", "C", cex=1.1, bty="n")
plot(meanChoiceperTime, type="l", lwd=2, lty=2, ylim=c(0.3,1), ylab="",xlab="", col = col.pal[3])
arrows(1:25,meanChoiceperTime-SEChoiceperTime,1:25,meanChoiceperTime+SEChoiceperTime, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[3])
par(new=TRUE)
plot(meanExpperTime, type="l",lwd=2,lty=1,  ylim=c(0.3,1), ylab=" ", xlab="", col = col.pal[6])
arrows(1:25,meanExpperTime-SEExpperTime,1:25,meanExpperTime+SEExpperTime, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[6])
legend("topleft", "D", cex=1.1, bty="n")
legend("bottomright", c("Choice Boxes", "Experience Boxes"), col = c(col.pal[3],col.pal[6]),lty = c(2,1), lwd=2, bty ="n", cex=0.9)
mtext("Round after change", side = 1, outer = TRUE, line = 2, cex = 1)
mtext("Proportion boxes viewed                   Proportion optimal choices", side = 2, outer = TRUE, line = 2, cex = 1)
d$Prop_Choice
d$Prop_Choice
d$Prop_Choice <- sapply(1:nrow(d),function (i) sum(c(d$Choice1_ms[i], d$Choice2_ms[i],d$Choice3_ms[i])>0) / 3)
d$Prop_Choice
#Compute proportion of neighbors inspected and duration per trial for choice boxes and experience boxes
d$Prop_Choice <- sapply(1:nrow(d),function (i) sum(c(d$Choice1_ms[i], d$Choice2_ms[i],d$Choice3_ms[i])>0) / 3)
d$Dur_Choice  <- sapply(1:nrow(d),function (i) sum(c(d$Choice1_ms[i], d$Choice2_ms[i],d$Choice3_ms[i])))
d$Prop_Exp    <- sapply(1:nrow(d),function (i) sum(c(d$Experience1_ms[i], d$Experience2_ms[i],d$Experience3_ms[i])>0) / 3)
d$Dur_Exp     <- sapply(1:nrow(d),function (i) sum(c(d$Experience1_ms[i], d$Experience2_ms[i],d$Experience3_ms[i])))
#Script to reproduce Fig. 2 - Behavioral Results
#Proportion Correct
# Spatial
CorrectperExpHard <- matrix(0, nrow = 200, ncol = 20)
CorrectperExpEasy <- matrix(0, nrow = 200, ncol = 20)
for (i in 1:20) {
for (j in unique(d$id)) {
CorrectperExpHard[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==1)])/length(d$Correct[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==1)])
CorrectperExpEasy[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==0)])/length(d$Correct[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==0)])
}
}
se <- function(x) sd(x)/sqrt(length(x))
meanCorrectperExpHard <- apply(CorrectperExpHard,2, mean)
SECorrectperExpHard <- apply(CorrectperExpHard,2, se)
meanCorrectperExpEasy <- apply(CorrectperExpEasy,2, mean)
SECorrectperExpEasy <- apply(CorrectperExpHard,2, se)
# Temporal
CorrectperTimeHard <- matrix(0, nrow = 200, ncol = 25)
CorrectperTimeEasy <- matrix(0, nrow = 200, ncol = 25)
for (i in 1:25) {
for (j in unique(d$id)) {
CorrectperTimeHard[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==1)])/length(d$Correct[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==1)])
CorrectperTimeEasy[which(unique(d$id)==j), i] <- sum(d$Correct[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==0)])/length(d$Correct[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==0)])
}
}
meanCorrectperTimeHard <- apply(CorrectperTimeHard,2, mean)
SECorrectperTimeHard <- apply(CorrectperTimeHard,2, se)
meanCorrectperTimeEasy <- apply(CorrectperTimeEasy,2, mean)
SECorrectperTimeEasy <- apply(CorrectperTimeHard,2, se)
#Proportion Vied
# Spatial
ChoiceperExp <- matrix(0, nrow = 200, ncol = 20)
ExpperExp <- matrix(0, nrow = 200, ncol = 20)
for (i in 1:20) {
for (j in unique(d$id)) {
ChoiceperExp[which(unique(d$id)==j), i] <- sum(d$Prop_Choice[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==1)])/length(d$Prop_Choice[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==1)])
ExpperExp[which(unique(d$id)==j), i]    <- sum(d$Prop_Exp[which(d$id == j & d$ExperienceSelf==i & d$Round != 1 & d$Hard==0)])/length(d$Prop_Exp[which(d$id == j &d$ExperienceSelf==i& d$Round != 1 & d$Hard==0)])
}
}
meanChoiceperExp <- apply(ChoiceperExp,2, mean)
SEChoiceperExp <- apply(ChoiceperExp,2, se)
meanExpperExp <- apply(ExpperExp,2, mean)
SEExpperExp <- apply(ExpperExp,2, se)
# Temporal
ChoiceperTime <- matrix(0, nrow = 200, ncol = 25)
ExpperTime <- matrix(0, nrow = 200, ncol = 25)
for (i in 1:25) {
for (j in unique(d$id)) {
ChoiceperTime[which(unique(d$id)==j), i] <- sum(d$Prop_Choice[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==1)])/length(d$Prop_Choice[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==1)])
ExpperTime[which(unique(d$id)==j), i]    <- sum(d$Prop_Exp[which(d$id == j & d$TimeSinceChange==i & d$Round != 1 & d$Hard==0)])/length(d$Prop_Exp[which(d$id == j &d$TimeSinceChange==i& d$Round != 1 & d$Hard==0)])
}
}
meanChoiceperTime<- apply(ChoiceperTime,2, mean)
SEChoiceperTime <- apply(ChoiceperTime,2, se)
meanExpperTime <- apply(ExpperTime,2, mean)
SEExpperTime <- apply(ExpperTime,2, se)
#color stuff
require(RColorBrewer)#load package
x <- seq(from=0, to=1, by=0.2) # fake data
col.pal <- brewer.pal(length(x), "Dark2") #create a pallette which you loop over for corresponding values
par(mfrow = c(2,2),
mar= c(1,1,2,2),
oma =c(3,3,1,0))
plot(meanCorrectperExpHard, type="l", lwd=2, lty=2, ylim=c(0.1,0.75), ylab="Proportion Correct",xlab="", col = col.pal[1])
arrows(1:20,meanCorrectperExpHard-SECorrectperExpHard,1:20,meanCorrectperExpHard+SECorrectperExpHard, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[1])
par(new=TRUE)
plot(meanCorrectperExpEasy, type="l",lwd=2,lty=1,  ylim=c(0.1,0.75), ylab=" ", main="Spatial Change (Migration)", xlab="", col = col.pal[2])
arrows(1:20,meanCorrectperExpEasy-SECorrectperExpEasy,1:20,meanCorrectperExpEasy+SECorrectperExpEasy, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[2])
abline(h = 0.25, lty=2)
legend("topleft", "A", cex=1.1, bty="n")
text(10, 0.27, "Chance level", col="black", cex = 0.8)
plot(meanCorrectperTimeHard, type="l", lwd=2, lty=2, ylim=c(0.1,0.75), ylab="",xlab="", col = col.pal[1])
arrows(1:25,meanCorrectperTimeHard-SECorrectperTimeHard,1:25,meanCorrectperTimeHard+SECorrectperTimeHard, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[1])
par(new=TRUE)
plot(meanCorrectperTimeEasy, type="l",lwd=2,lty=1,  ylim=c(0.1,0.75), ylab=" ", main="Temporal Change", xlab="", col = col.pal[2])
arrows(1:25,meanCorrectperTimeEasy-SECorrectperTimeEasy,1:25,meanCorrectperTimeEasy+SECorrectperTimeEasy, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[2])
abline(h = 0.25, lty=2)
legend("topleft", "B", cex=1.1, bty="n")
text(12.5, 0.27, "Chance level", col="black", cex = 0.8)
legend("bottomright", c("Easy Phases", "Hard Phases"), col = c(col.pal[2],col.pal[1]), lty=c(1,2), lwd=2, bty ="n", cex=0.9)
plot(meanChoiceperExp, type="l", lwd=2, lty=2, ylim=c(0.3,1), ylab="Proportion ",xlab="", col = col.pal[3])
arrows(1:20,meanChoiceperExp-SEChoiceperExp,1:20,meanChoiceperExp+SEChoiceperExp, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[3])
par(new=TRUE)
plot(meanExpperExp, type="l",lwd=2,lty=1,  ylim=c(0.3,1), ylab=" ", xlab="", col = col.pal[6])
arrows(1:20,meanExpperExp-SEExpperExp,1:20,meanExpperExp+SEExpperExp, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[6])
legend("topleft", "C", cex=1.1, bty="n")
plot(meanChoiceperTime, type="l", lwd=2, lty=2, ylim=c(0.3,1), ylab="",xlab="", col = col.pal[3])
arrows(1:25,meanChoiceperTime-SEChoiceperTime,1:25,meanChoiceperTime+SEChoiceperTime, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[3])
par(new=TRUE)
plot(meanExpperTime, type="l",lwd=2,lty=1,  ylim=c(0.3,1), ylab=" ", xlab="", col = col.pal[6])
arrows(1:25,meanExpperTime-SEExpperTime,1:25,meanExpperTime+SEExpperTime, code=3, lwd=1, length=0.02, angle = 90, col = col.pal[6])
legend("topleft", "D", cex=1.1, bty="n")
legend("bottomright", c("Choice Boxes", "Experience Boxes"), col = c(col.pal[3],col.pal[6]),lty = c(2,1), lwd=2, bty ="n", cex=0.9)
mtext("Round after change", side = 1, outer = TRUE, line = 2, cex = 1)
mtext("Proportion boxes viewed                   Proportion optimal choices", side = 2, outer = TRUE, line = 2, cex = 1)
exp(-2)
m1 <- stan( file="EWA_baseline_multilevel.stan" , data=dat , chains=1, cores=1, iter = 500, control = list(adapt_delta=0.8, max_treedepth = 13))
precis(m1)
traceplot(m1)
